// Code generated by "core generate"; DO NOT EDIT.

package glong

import (
	"log"

	"cogentcore.org/core/enums"
	"github.com/emer/emergent/v2/emer"
)

var _PrjnTypeValues = []PrjnType{4}

// PrjnTypeN is the highest valid value for type PrjnType, plus one.
const PrjnTypeN PrjnType = 5

var _PrjnTypeValueMap = map[string]PrjnType{`NMDA_`: 4}

var _PrjnTypeDescMap = map[PrjnType]string{4: ``}

var _PrjnTypeMap = map[PrjnType]string{4: `NMDA_`}

// String returns the string representation of this PrjnType value.
func (i PrjnType) String() string {
	return enums.StringExtended[PrjnType, emer.PrjnType](i, _PrjnTypeMap)
}

// SetString sets the PrjnType value from its string representation,
// and returns an error if the string is invalid.
func (i *PrjnType) SetString(s string) error {
	return enums.SetStringExtended(i, (*emer.PrjnType)(i), s, _PrjnTypeValueMap)
}

// Int64 returns the PrjnType value as an int64.
func (i PrjnType) Int64() int64 { return int64(i) }

// SetInt64 sets the PrjnType value from an int64.
func (i *PrjnType) SetInt64(in int64) { *i = PrjnType(in) }

// Desc returns the description of the PrjnType value.
func (i PrjnType) Desc() string {
	if str, ok := _PrjnTypeDescMap[i]; ok {
		return str
	}
	return emer.PrjnType(i).Desc()
}

// PrjnTypeValues returns all possible values for the type PrjnType.
func PrjnTypeValues() []PrjnType {
	es := emer.PrjnTypeValues()
	res := make([]PrjnType, len(es))
	for i, e := range es {
		res[i] = PrjnType(e)
	}
	res = append(res, _PrjnTypeValues...)
	return res
}

// Values returns all possible values for the type PrjnType.
func (i PrjnType) Values() []enums.Enum {
	es := emer.PrjnTypeValues()
	les := len(es)
	res := make([]enums.Enum, les+len(_PrjnTypeValues))
	for i, d := range es {
		res[i] = d
	}
	for i, d := range _PrjnTypeValues {
		res[i+les] = d
	}
	return res
}

// MarshalText implements the [encoding.TextMarshaler] interface.
func (i PrjnType) MarshalText() ([]byte, error) {
	return []byte(i.String()), nil
}

// UnmarshalText implements the [encoding.TextUnmarshaler] interface.
func (i *PrjnType) UnmarshalText(text []byte) error {
	if err := i.SetString(string(text)); err != nil {
		log.Println("PrjnType.UnmarshalText:", err)
	}
	return nil
}
